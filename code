required_packages <- c(
  "shiny", "shinydashboard", "bslib", "childsds"
)
new_packages <- required_packages[!(required_packages %in% installed.packages()[, "Package"])]
if(length(new_packages)) install.packages(new_packages)

# Load libraries
library(shiny)
library(shinydashboard)
library(bslib)
library(childsds)

# Define UI for application
ui <- dashboardPage(
  dashboardHeader(title = "CalcuraMD"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Body Metrics", tabName = "body_metrics", icon = icon("dumbbell")),
      menuItem("Fluid Management", tabName = "fluids", icon = icon("tint")),
      menuItem("Lab Calculators", tabName = "labs", icon = icon("flask")),
      menuItem("Renal", tabName = "renal", icon = icon("medkit")),
      menuItem("Growth Charts", tabName = "growth", icon = icon("chart-line")),
      menuItem("Cardio", tabName = "cardio", icon = icon("heartbeat")),
      menuItem("Dosing", tabName = "dosing", icon = icon("capsules")),
      menuItem("Socioeconomic", tabName = "socio", icon = icon("users"))
    )
  ),
  dashboardBody(
    theme = bs_theme(version = 4, bootswatch = "flatly"),
    tabItems(
      # Body Metrics Tab
      tabItem(tabName = "body_metrics",
              tabsetPanel(
                tabPanel("BMI",
                         numericInput("bmi_weight", "Weight (kg)", 70),
                         numericInput("bmi_height", "Height (cm)", 170),
                         actionButton("bmi_calc", "Calculate BMI"),
                         verbatimTextOutput("bmi_result")
                ),
                tabPanel("BSA",
                         numericInput("bsa_weight", "Weight (kg)", 70),
                         numericInput("bsa_height", "Height (cm)", 170),
                         actionButton("bsa_calc", "Calculate BSA"),
                         verbatimTextOutput("bsa_result")
                )
              )
      ),
      # Fluid Management Tab
      tabItem(tabName = "fluids",
              tabsetPanel(
                tabPanel("Burn Resuscitation",
                         numericInput("burn_weight", "Weight (kg)", 70),
                         numericInput("burn_tbsa", "% TBSA Burn", 20),
                         numericInput("burn_time", "Hours since injury", 4),
                         actionButton("burn_calc", "Calculate Fluids"),
                         verbatimTextOutput("burn_result")
                )
              )
      ),
      # Lab Calculators Tab
      tabItem(tabName = "labs",
              tabsetPanel(
                tabPanel("Anion Gap",
                         numericInput("ag_na", "Na+ (mmol/L)", 140),
                         numericInput("ag_cl", "Cl- (mmol/L)", 104),
                         numericInput("ag_hco3", "HCO3- (mmol/L)", 24),
                         checkboxInput("ag_with_k", "Include K+?", FALSE),
                         conditionalPanel("input.ag_with_k", numericInput("ag_k", "K+ (mmol/L)", 4)),
                         actionButton("ag_calc", "Calculate Anion Gap"),
                         verbatimTextOutput("ag_result")
                ),
                tabPanel("A-a Gradient",
                         numericInput("aa_pao2", "PaO2 (mmHg)", 95),
                         numericInput("aa_paco2", "PaCO2 (mmHg)", 40),
                         numericInput("aa_fio2", "FiO2 (fraction)", 0.21),
                         actionButton("aa_calc", "Calculate A-a Gradient"),
                         verbatimTextOutput("aa_result")
                ),
                tabPanel("a/A Ratio",
                         numericInput("aar_pao2", "PaO2 (mmHg)", 95),
                         numericInput("aar_paco2", "PaCO2 (mmHg)", 40),
                         numericInput("aar_fio2", "FiO2 (fraction)", 0.21),
                         actionButton("aar_calc", "Calculate a/A Ratio"),
                         verbatimTextOutput("aar_result")
                ),
                tabPanel("Corrected Calcium",
                         numericInput("ca_meas", "Measured Ca (mmol/L)", 2.2),
                         numericInput("ca_alb", "Albumin (g/L)", 35),
                         actionButton("ca_calc", "Calculate Corrected Ca"),
                         verbatimTextOutput("ca_result")
                ),
                tabPanel("Corrected Sodium",
                         numericInput("nacl_na", "Na+ (mmol/L)", 140),
                         numericInput("nacl_glu", "Glucose (mg/dL)", 200),
                         actionButton("nacl_calc", "Calculate Corrected Na"),
                         verbatimTextOutput("nacl_result")
                ),
                tabPanel("Serum Osmolality",
                         numericInput("osm_na", "Na+ (mmol/L)", 140),
                         numericInput("osm_glu", "Glucose (mg/dL)", 100),
                         numericInput("osm_bun", "BUN (mg/dL)", 14),
                         actionButton("osm_calc", "Calculate Osmolality"),
                         verbatimTextOutput("osm_result")
                )
              )
      ),
      # Renal Calculators Tab
      tabItem(tabName = "renal",
              tabsetPanel(
                tabPanel("Cockcroft-Gault",
                         numericInput("cg_weight", "Weight (kg)", 70),
                         numericInput("cg_age", "Age (years)", 40),
                         numericInput("cg_scr", "SCr (µmol/L)", 88),
                         selectInput("cg_sex", "Sex", c("Male", "Female")),
                         actionButton("cg_calc", "Calculate CrCl CG"),
                         verbatimTextOutput("cg_result")
                ),
                tabPanel("Jelliffe",
                         numericInput("jel_weight", "Weight (kg)", 70),
                         numericInput("jel_age", "Age (years)", 60),
                         numericInput("jel_scr", "SCr (mg/dL)", 1),
                         checkboxInput("jel_female", "Female?", FALSE),
                         actionButton("jel_calc", "Calculate CrCl Jelliffe"),
                         verbatimTextOutput("jel_result")
                ),
                tabPanel("URR",
                         numericInput("urr_pre", "Pre-dialysis Urea (mg/dL)", 60),
                         numericInput("urr_post", "Post-dialysis Urea (mg/dL)", 20),
                         actionButton("urr_calc", "Calculate URR"),
                         verbatimTextOutput("urr_result")
                ),
                tabPanel("eGFR CKD-EPI",
                         numericInput("egfr_scr", "SCr (mg/dL)", 1),
                         numericInput("egfr_age", "Age (years)", 40),
                         selectInput("egfr_sex", "Sex", c("Male", "Female")),
                         actionButton("egfr_calc", "Calculate eGFR"),
                         verbatimTextOutput("egfr_result")
                )
              )
      ),
      # Growth Charts Tab
      tabItem(tabName = "growth",
              tabsetPanel(
                tabPanel("Height-for-Age",
                         selectInput("gh_sex", "Sex", c("Female", "Male")),
                         numericInput("gh_age", "Age (years)", 5),
                         numericInput("gh_ht", "Height (cm)", 110),
                         actionButton("gh_calc", "Calculate Percentile"),
                         verbatimTextOutput("gh_result")
                ),
                tabPanel("Weight-for-Age",
                         selectInput("wfa_sex", "Sex", c("Female", "Male")),
                         numericInput("wfa_age", "Age (years)", 5),
                         numericInput("wfa_wt", "Weight (kg)", 20),
                         actionButton("wfa_calc", "Calculate Percentile"),
                         verbatimTextOutput("wfa_result")
                )
              )
      ),
      # Cardio Tab
      tabItem(tabName = "cardio",
              tabsetPanel(
                tabPanel("NT-proBNP Risk",
                         numericInput("np_bnp", "NT-proBNP (pg/mL)", 500),
                         numericInput("np_age", "Age (years)", 65),
                         numericInput("np_bp", "SBP (mmHg)", 120),
                         numericInput("np_rr", "Respiratory Rate", 16),
                         numericInput("np_creat", "SCr (µmol/L)", 100),
                         actionButton("np_calc", "Calculate Risk"),
                         verbatimTextOutput("np_result")
                ),
                tabPanel("MAP",
                         numericInput("map_sbp", "SBP (mmHg)", 120),
                         numericInput("map_dbp", "DBP (mmHg)", 80),
                         actionButton("map_calc", "Calculate MAP"),
                         verbatimTextOutput("map_result")
                ),
                tabPanel("Shock Index",
                         numericInput("si_hr", "HR (bpm)", 80),
                         numericInput("si_sbp", "SBP (mmHg)", 120),
                         actionButton("si_calc", "Calculate SI"),
                         verbatimTextOutput("si_result")
                )
              )
      ),
      # Dosing Tab
      tabItem(tabName = "dosing",
              tabsetPanel(
                tabPanel("BSA-based",
                         numericInput("dose_m2", "Dose (mg/m²)", 100),
                         numericInput("dose_bsa", "BSA (m²)", 1.73),
                         actionButton("dose_calc", "Calculate Dose"),
                         verbatimTextOutput("dose_result")
                ),
                tabPanel("Weight-based",
                         numericInput("wbd_wt", "Weight (kg)", 70),
                         numericInput("wbd_mgkg", "Dose (mg/kg)", 2),
                         actionButton("wbd_calc", "Calculate Dose"),
                         verbatimTextOutput("wbd_result")
                )
              )
      ),
      # Socioeconomic Tab
      tabItem(tabName = "socio",
              tabsetPanel(
                tabPanel("Kuppuswamy",
                         selectInput("edu_level", "Education of Head", choices = c(
                           "Profession or honours"              = 7,
                           "Graduate"                          = 6,
                           "Intermediate or diploma"           = 5,
                           "High school certificate"           = 4,
                           "Middle school certificate"         = 3,
                           "Primary school certificate"        = 2,
                           "Illiterate"                        = 1
                         )),
                         selectInput("occ_status", "Occupation of Head", choices = c(
                           "Legislators, senior officials, managers" = 10,
                           "Professionals"                           = 9,
                           "Technicians & associate professionals"   = 8,
                           "Clerks"                                  = 7,
                           "Skilled workers & sales workers"        = 6,
                           "Skilled agricultural & fishery workers" = 5,
                           "Craft & related trade workers"           = 4,
                           "Plant & machine operators & assemblers"  = 3,
                           "Elementary occupations"                  = 2,
                           "Unemployed / no income"                  = 1
                         )),
                         selectInput("inc_score", "Income Score (monthly family income)", choices = c(
                           "≥ ₹213,814"            = 12,
                           "₹106,850 - ₹213,813"   = 10,
                           "₹80,110 - ₹106,849"    = 6,
                           "₹53,361 - ₹80,109"     = 4,
                           "₹31,978 - ₹53,360"     = 3,
                           "₹10,703 - ₹31,977"     = 2,
                           "< ₹10,702"             = 1
                         )),
                         actionButton("kupp_calc", "Calculate Kuppuswamy SES"),
                         verbatimTextOutput("kupp_result"),
                         br(),
                         HTML("<strong>Kuppuswamy Classification (2024 CPI-IW)</strong>"),
                         tags$table(
                           tags$tr(tags$th("Total Score"), tags$th("SES Class")),
                           tags$tr(tags$td("26–29"), tags$td("Upper (I)")),
                           tags$tr(tags$td("16–25"), tags$td("Upper Middle (II)")),
                           tags$tr(tags$td("11–15"), tags$td("Lower Middle (III)")),
                           tags$tr(tags$td("5–10"),  tags$td("Upper Lower (IV)")),
                           tags$tr(tags$td("< 5"),    tags$td("Lower (V)"))
                         ),
                         p(em("Source: Mandal I. et al. Int J Community Med Public Health. 2024; CPI-IW base 2001=100."))
                ),
                tabPanel("B.G. Prasad",
                         numericInput("prasad_income", "Per Capita Monthly Income (INR)", 2000),
                         actionButton("prasad_calc", "Calculate Prasad Classification"),
                         verbatimTextOutput("prasad_result"),
                         br(),
                         HTML("<strong>B.G. Prasad Classification (2024 CPI-IW)</strong>"),
                         tags$table(
                           tags$tr(tags$th("Monthly PCI (₹)"), tags$th("Class")),
                           tags$tr(tags$td("< 1132"),       tags$td("V")),
                           tags$tr(tags$td("1132–2262"),    tags$td("IV")),
                           tags$tr(tags$td("2263–3771"),    tags$td("III")),
                           tags$tr(tags$td("3772–7543"),    tags$td("II")),
                           tags$tr(tags$td("≥ 7544"),       tags$td("I"))
                         ),
                         p(em("Source: Labour Bureau, Ministry of Labour & Employment, Govt. of India; CPI-IW base 2016=100, March 2024."))
                )
              )
      )
    )
  )
)

# Server logic
server <- function(input, output) {
  # BMI
  observeEvent(input$bmi_calc, { output$bmi_result <- renderText(round(input$bmi_weight / ((input$bmi_height/100)^2), 1)) })
  # BSA
  observeEvent(input$bsa_calc, { result <- round(sqrt((input$bsa_height * input$bsa_weight) / 3600), 2); output$bsa_result <- renderText(result) })
  # Burn Resuscitation
  observeEvent(input$burn_calc, { total <- 2 * input$burn_weight * input$burn_tbsa; given <- if(input$burn_time<=8) total/2*(input$burn_time/8) else if(input$burn_time<=24) total/2 + total/2*((input$burn_time-8)/16) else total; output$burn_result <- renderText(paste0("Total: ", round(total), " mL\nGiven: ", round(given), " mL")) })
  # Anion Gap
  observeEvent(input$ag_calc, { ag <- if(input$ag_with_k) input$ag_na+input$ag_k-(input$ag_cl+input$ag_hco3) else input$ag_na-(input$ag_cl+input$ag_hco3); output$ag_result <- renderText(round(ag,1)) })
  # A-a Gradient
  observeEvent(input$aa_calc, { pao2<-(760-47)*input$aa_fio2-input$aa_paco2/0.8; output$aa_result <- renderText(round(pao2-input$aa_pao2,1)) })
  # a/A Ratio
  observeEvent(input$aar_calc, { pao2<-(760-47)*input$aar_fio2-input$aar_paco2/0.8; output$aar_result <- renderText(round(input$aar_pao2/pao2,3)) })
  # Corrected Calcium
  observeEvent(input$ca_calc, { output$ca_result <- renderText(round(input$ca_meas + 0.02*(40-input$ca_alb),2)) })
  # Corrected Sodium
  observeEvent(input$nacl_calc, { output$nacl_result <- renderText(round(input$nacl_na + 0.024*(input$nacl_glu-100),2)) })
  # Serum Osmolality
  observeEvent(input$osm_calc, { osm<-2*input$osm_na+input$osm_glu/18+input$osm_bun/2.8; output$osm_result <- renderText(round(osm,1)) })
  # Cockcroft-Gault
  observeEvent(input$cg_calc, { base<-(140-input$cg_age)*input$cg_weight/(0.814*input$cg_scr); crcl<-if(input$cg_sex=="Female")0.85*base else base; output$cg_result<-renderText(round(crcl,1)) })
  # Jelliffe CrCl
  observeEvent(input$jel_calc, { base<-(98-0.8*(input$jel_age-20))*input$jel_weight/input$jel_scr; crcl<-if(input$jel_female)0.9*base else base; output$jel_result<-renderText(round(crcl,1)) })
  # URR
  observeEvent(input$urr_calc, { urr<-(input$urr_pre-input$urr_post)/input$urr_pre*100; output$urr_result<-renderText(paste0(round(urr,1), "%")) })
  # eGFR CKD-EPI
  observeEvent(input$egfr_calc, { k<-if(input$egfr_sex=="Female")0.7 else 0.9; a<-if(input$egfr_sex=="Female")-0.241 else -0.302; minv<-min(input$egfr_scr/k,1); maxv<-max(input$egfr_scr/k,1); egfr<-142*(minv^a)*(maxv^-1.2)*(0.9938^input$egfr_age)*ifelse(input$egfr_sex=="Female",1.012,1); output$egfr_result<-renderText(round(egfr,1)) })
  # Height-for-Age Percentile
  observeEvent(input$gh_calc, { sex<-tolower(substr(input$gh_sex,1,1)); cent<-get_centile(sex=sex, age=input$gh_age*12, item="hfa", ref="cdc", value=input$gh_ht); output$gh_result<-renderText(paste0(round(cent,1),"th percentile")) })
  # Weight-for-Age Percentile
  observeEvent(input$wfa_calc, { sex<-tolower(substr(input$wfa_sex,1,1)); cent<-get_centile(sex=sex, age=input$wfa_age*12, item="wfa", ref="cdc", value=input$wfa_wt); output$wfa_result<-renderText(paste0(round(cent,1),"th percentile")) })
  # NT-proBNP Risk
  observeEvent(input$np_calc, { lp<--7.34+0.82*log(input$np_bnp)+0.03*input$np_age-0.01*input$np_bp+0.1*input$np_rr+0.005*input$np_creat; prob<-exp(lp)/(1+exp(lp))*100; output$np_result<-renderText(paste0(round(prob,1),"%")) })
  # MAP
  observeEvent(input$map_calc, { map<-(input$map_sbp+2*input$map_dbp)/3; output$map_result<-renderText(round(map,1)) })
  # Shock Index
  observeEvent(input$si_calc, { output$si_result<-renderText(round(input$si_hr/input$si_sbp,2)) })
  # BSA-based Dosing
  observeEvent(input$dose_calc, { dose<-input$dose_m2*input$dose_bsa; output$dose_result<-renderText(round(dose,1)) })
  # Weight-based Dosing
  observeEvent(input$wbd_calc, { dose<-input$wbd_wt*input$wbd_mgkg; output$wbd_result<-renderText(round(dose,1)) })
  # Kuppuswamy SES
  observeEvent(input$kupp_calc, { total<-as.numeric(input$edu_level)+as.numeric(input$occ_status)+as.numeric(input$inc_score); cls<-if(total>=26)"Upper (I)" else if(total>=16)"Upper Middle (II)" else if(total>=11)"Lower Middle (III)" else if(total>=5)"Upper Lower (IV)" else"Lower (V)"; output$kupp_result<-renderText(paste0("Score: ",total," → ",cls)) })
  # B.G. Prasad Classification
  observeEvent(input$prasad_calc, { pci<-input$prasad_income; cls<-if(pci>=7544)"Class I" else if(pci>=3772)"Class II" else if(pci>=2263)"Class III" else if(pci>=1132)"Class IV" else"Class V"; output$prasad_result<-renderText(paste0("₹",pci," → ",cls)) })
}

# Run the application
shinyApp(ui, server)
